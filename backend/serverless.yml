
service: sauna-booking-backend

custom:
  tableName: 'sauna-booking'
  cognito_user_pool_arn: 'arn:aws:cognito-idp:eu-west-1:897378097038:userpool/eu-west-1_qNydNdlvN'

# frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  profile: jakoivus
  region: eu-west-1
  stage: dev
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:Get
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
#         - ses:SendEmail
      Resource:
        - { "Fn::GetAtt": ["EventsDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn" ] }
    - Effect: Allow
      Action:
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminAddUserToGroup
        - cognito-idp:AdminUpdateUserAttributes
        - cognito-idp:AdminDeleteUser
        - cognito-idp:AdminGetUser
      Resource: 
        - 'arn:aws:cognito-idp:eu-west-1:897378097038:userpool/eu-west-1_qNydNdlvN'
      # - { "Fn::GetAtt": ["CognitoUserPool", "Arn"] } 
      # - ${self:custom.cognito_user_pool_arn}

  environment:
    DYNAMODB_EVENTS_TABLE: ${self:custom.tableName}-events 
    DYNAMODB_USERS_TABLE: ${self:custom.tableName}-users 

    COGNITO_REGION: eu-west-1
    COGNITO_USER_POOL_ID: eu-west-1_qNydNdlvN

resources:
  Resources:
    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognito-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - ${self:custom.cognito_user_pool_arn}

    EventsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.tableName}-events
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
          # - AttributeName: id
          #   AttributeType: S


        KeySchema:
          - AttributeName: email
            KeyType: HASH
          # - AttributeName: id
          #   KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        # TableName: ${self:custom.tableName}-events

    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'

      Properties:
        TableName: ${self:custom.tableName}-users
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S

        KeySchema:
          - AttributeName: email
            KeyType: HASH

        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        # TableName: ${self:custom.tableName}-users
functions:
  app:
    handler: index.handler
    events:
      - http: 
          path: /
          method: ANY 
          cors: true
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId: 
              Ref: ApiGatewayAuthorizer 
      - http: 
          path: "{proxy+}"
          method: ANY 
          cors: true
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId: 
              Ref: ApiGatewayAuthorizer