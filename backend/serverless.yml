# serverless.yml

service: my-javascript-backend

custom:
  tableName: 'users-table-${self:provider.stage}'

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  region: eu-west-1
  stage: dev
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:Get
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
#         - ses:SendEmail
      Resource:

        - { "Fn::GetAtt": ["DynamoDBUsersTable", "Arn" ] }
  environment:
    DYNAMODB_USERS_TABLE: ${self:custom.tableName} 

functions:
  app:
    handler: index.handler
    events:
      - http: ANY /
        # authorizer: aws_iam
        # cors: true
      - http: 'ANY /{proxy+}'
        # authorizer: aws_iam
        # cors: true

resources:
  Resources:
    DynamoDBUsersTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: Email-index
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
            Projection:
              ProjectionType: ALL

        TableName: ${self:custom.tableName}