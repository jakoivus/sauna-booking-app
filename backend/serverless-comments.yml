# serverless.yml

service: my-javascript

custom:
  # tableName: 'users-table-${self:provider.stage}'
  
  myStage: ${opt:stage, self:provider.stage}
  myEnvironment:
    DYNAMODB_COMMENTS_TABLE:
      dev: ${self:service}-comments-dev
    COGNITO_REGION:
      dev: eu-west-1
    COGNITO_USER_POOL_ID:
      dev: eu-west-1_ez7TepndW
  dev:
    cognito_user_pool_arn: arn:aws:cognito-idp:eu-west-1:897378097038:userpool/eu-west-1_ez7TepndW

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  # profile: default
  region: eu-west-1
  stage: ${opt:stage, 'dev'}
  environment:
    DYNAMODB_COMMENTS_TABLE: ${self:custom.myEnvironment.DYNAMODB_COMMENTS_TABLE.${self:custom.myStage}}
    # DYNAMODB_USERS_TABLE: ${self:custom.tableName}
    COGNITO_REGION: ${self:custom.myEnvironment.COGNITO_REGION.${self:custom.myStage}}
    COGNITO_USER_POOL_ID: ${self:custom.myEnvironment.COGNITO_USER_POOL_ID.${self:custom.myStage}}
    # SES_REGION: ${self:custom.myEnvironment.SES_REGION.${self:custom.myStage}}
    # SES_SENDER_ADDRESS: ${self:custom.myEnvironment.SES_SENDER_ADDRESS.${self:custom.myStage}}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:Get
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_COMMENTS_TABLE}"
      # Resource:
      #   - { "Fn::GetAtt": ["DynamoDBTable", "Arn" ] }
    - Effect: Allow
      Action:
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminAddUserToGroup
        - cognito-idp:AdminUpdateUserAttributes
        - cognito-idp:AdminDeleteUser
        - cognito-idp:AdminGetUser
      Resource: ${self:custom.${opt:stage}.cognito_user_pool_arn}
    # - Effect: Allow
    #   Action:
    #     - ses:SendEmail
    #     - ses:SendRawEmail
    #   Resource: "*"

functions:
  app:
    handler: index.handler
    events:
      - http: ANY /
        # authorizer: aws_iam
        # cors: true
      - http: 'ANY /{proxy+}'
        # authorizer: aws_iam
        cors: true

resources:
  Resources:
    DynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          # - AttributeName: email
          #   AttributeType: S
          # - AttributeName: commentId
          #   AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        # GlobalSecondaryIndexes:
        #   - IndexName: Email-index
        #     KeySchema:
        #       - AttributeName: email
        #         KeyType: HASH
        #     ProvisionedThroughput:
        #       ReadCapacityUnits: 1
        #       WriteCapacityUnits: 1
        #     Projection:
        #       ProjectionType: ALL
        #   - IndexName: Comment-index
        #     KeySchema:
        #       - AttributeName: commentId
        #         KeyType: HASH
        #     ProvisionedThroughput:
        #       ReadCapacityUnits: 1
        #       WriteCapacityUnits: 1
        #     Projection:
        #       ProjectionType: ALL
        
        TableName: ${self:provider.environment.DYNAMODB_COMMENTS_TABLE}
        # TableName: ${self:custom.tableName}